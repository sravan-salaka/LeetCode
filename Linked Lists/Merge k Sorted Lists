/* Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    struct comparator{
    bool operator() ( ListNode* i, ListNode* j){
        return i->val > j->val; }
        };
    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        if(lists.empty()) return NULL;
        if(lists.size()==1) return lists[0];
        ListNode* resultHead=NULL, *result=NULL;
        priority_queue<ListNode*, std::vector<ListNode*>, comparator> minHeap;
        
        for(int i=0;i<lists.size();i++)
        {
            if(lists[i]!=NULL)
            minHeap.push(lists[i]);
        }
        while(!minHeap.empty())
        {
            ListNode* temp=minHeap.top();
            minHeap.pop();
            if(temp->next)
            minHeap.push(temp->next);
            if(result==NULL)
            {
                resultHead=temp;
                result=temp;
            }
            else
            {
                result->next=temp;
                result=temp;
            }
        }
        return resultHead;
    }
};